[
{
	"uri": "//localhost:1313/",
	"title": "AWS OpenSearch Service",
	"tags": [],
	"description": "",
	"content": "Working with Amazon OpenSearch Service - AWS OpenSearch Overview In this workshop, you will learn how to integrate Amazon OpenSearch with a serverless backend using AWS Lambda and deploy a simple static website on AWS using S3 and CloudFront. The workshop also covers how to log request data for each search query to analyze search keywords and request status using CloudWatch.\nTable of Contents Introduction Prerequisites Configure AWS OpenSearch Domain Deploy Backend with AWS Lambda Host Static Website with Amazon S3 and CloudFront View Application Logs with CloudWatch Clean up Resources "
},
{
	"uri": "//localhost:1313/3-configurationawsopensearchdomain/3.1-downloadsrc/",
	"title": "Download Resources",
	"tags": [],
	"description": "",
	"content": " Navigate to the location where you want to download the project resources, then open Git Bash or Command Line at that location and run the following command: git clone https://github.com/DannyCandy/AWSOpensearchApplication.git\rUse MongoDB Atlas sample data. In this step, we will use the sample data from MongoDB Atlas to populate data into the OpenSearch Domain. This sample contains over 20,000 records and will help demonstrate the power and efficiency of applying OpenSearch to search tools, such as the project we just downloaded. Visit the MongoDB Atlas homepage and create an account: MongoDB Atlas login page. Once your account is created and you\u0026rsquo;re logged in, create a new Cluster. The newly created cluster will include a sample database called sample_mflix from MongoDB Atlas, which comes with 6 collections. Select the \u0026ldquo;movies\u0026rdquo; collection, which contains 21,349 records, to configure indexing and input data for OpenSearch. Get the connection string from MongoDB Atlas In MongoDB Atlas, go to the Database Access tab in the left-hand navigation menu. Click the Edit button. In the Edit User dialog, select Edit Password, update the user\u0026rsquo;s password, scroll down, and click Update User. Remember this password for use in later steps. Back on the MongoDB Atlas homepage, go to the Overview tab and click Connect. In the \u0026ldquo;Connect to Cluster\u0026rdquo; dialog, choose the Driver option under Connect to your application. Then, copy the connection string under the Add your connection string into your application code section, and replace the \u0026lt;password\u0026gt; placeholder with the password you just set. This gives you a complete connection string. After obtaining the connection string, open the project in VSCode. Open the backend folder of the project and create a new .env file in that folder. Define the constants MONGO_CONNECT_URL and PORT, where PORT is set to 5000, and MONGO_CONNECT_URL is the connection string you copied. Once the constants are configured, open the terminal in VSCode. Navigate to the backend folder using the command: cd .\\backend\\ Run npm i and npm install dotenv. After successful installation, your terminal should look like this: Next, open the index.js file inside the backend folder and add the following lines right after the import section: import dotenv from 'dotenv';\rdotenv.config();\r"
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-installnode_npm/2.1.1-installnodejs/",
	"title": "Install Node.js",
	"tags": [],
	"description": "",
	"content": "Access the official Node.js download page Visit the Node.js download page Choose the Windows environment setup Download the .msi installer for Windows Install Node.js and NPM Launch the downloaded installer by double-clicking the file The Node.js Setup Wizard will display the welcome screen Click Next, accept the license agreement, and click Next Choose the installation directory for Node.js and keep clicking Next to proceed Click Next, and the installation process will run automatically. Once completed, you will see the following screen: To verify that Node.js was installed successfully, run the following command: node -v\rThis command will display the installed Node.js version on your machine. Use the following command to check the NPM version:\nnpm -v\r"
},
{
	"uri": "//localhost:1313/1-introduce/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "OpenSearch is an open-source, distributed search and analytics engine developed by Amazon. It is designed to be scalable, secure, and easy to integrate with applications for real-time search and data analysis. In this workshop, you will learn how to integrate AWS OpenSearch into a simple serverless application using AWS Lambda, S3, and CloudFront.\nBy using OpenSearch, you gain several advantages that traditional database search mechanisms do not provide:\nPowerful full-text search capabilities with relevance scoring Real-time indexing and querying of data Scalability for handling large datasets Tight integration with other AWS services like Lambda, IAM, and CloudWatch Built-in security features such as fine-grained access control and encryption Visualize data with OpenSearch Dashboards Fully managed service with high availability and automatic backups Easily deploy search features without maintaining search infrastructure With these benefits, OpenSearch is an ideal choice for applications that require robust search functionality with minimal infrastructure management. This workshop will guide you step-by-step to set up OpenSearch, index data, query it through a Lambda function, and display results on a static website hosted on AWS.\n"
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-installnode_npm/",
	"title": "Set Up Node.js Environment and VScode Editor",
	"tags": [],
	"description": "",
	"content": "In this step, we will download Node.js and the VSCode IDE to set up the application environment for the workshop on Windows platform.\nContents Install Node.js Install VScode "
},
{
	"uri": "//localhost:1313/2-prerequiste/2.2-installgit/",
	"title": "Install Git",
	"tags": [],
	"description": "",
	"content": "Access the official Git download page Visit the Git download page Click the orange \u0026ldquo;Click here to download\u0026rdquo; text to download the Git installer Run the Git installer Launch the installer you just downloaded by double-clicking the file The Git Setup Wizard will display the welcome screen Click Next, accept the license agreement, and click Next Choose the installation folder for Git resources and keep clicking Next to proceed Click Next, and the installation process will begin automatically. Once completed, the following window will appear To verify that Git was installed successfully, run the following command in your CLI: git --version\r"
},
{
	"uri": "//localhost:1313/2-prerequiste/2.1-installnode_npm/2.1.2-installvscode/",
	"title": "Install VScode",
	"tags": [],
	"description": "",
	"content": "Access the official VScode download page Visit the Visual Studio Code download page Select the download option for the Windows environment Install VScode Launch the downloaded installer by double-clicking the file, and follow the installation wizard\u0026rsquo;s instructions until the setup is complete. After completing the steps above, you can launch the VScode application as shown below. "
},
{
	"uri": "//localhost:1313/2-prerequiste/",
	"title": "Preparation Steps",
	"tags": [],
	"description": "",
	"content": "\rIn this workshop, you need to configure your environment and install necessary tools such as Node.js, npm, Git, VS Code, and create an IAM Role in your AWS account.\nTo integrate OpenSearch and understand how the service works, the following steps will guide you through the required prerequisites.\nContents Install Node.js and npm Install Git Create IAM Role "
},
{
	"uri": "//localhost:1313/3-configurationawsopensearchdomain/3.2-setupdomain/",
	"title": "Set Up OpenSearch Domain",
	"tags": [],
	"description": "",
	"content": " Go to the AWS Console AWS Console Interface and select the Amazon OpenSearch Service.\nOn the Amazon OpenSearch Service homepage:\nSelect Managed clusters under the Get started section and click the Create domain button. In the domain creation window, fill in the fields as guided below. First, enter the domain name. Next, choose the Standard create option and the Dev/test template. Then select the Domain without standby option and choose 1-AZ to reduce cost during the learning phase. Continue with the next steps as shown in the following guide. For fields not specifically mentioned, keep the default settings. Under Number of data nodes, select 1, since we\u0026rsquo;ve chosen to use 1-AZ earlier. In the Network configuration section, choose Public access. Continue with the next steps according to the following guide. For unspecified fields, keep the default settings. Finally, click Create. Note: During the configuration of Master username and Master password, make sure to remember these values. You\u0026rsquo;ll need them later to set environment variables for the project.\nFinally, wait for the domain creation process to complete. This may take around 10–15 minutes. Once completed, a successfully created domain will appear as shown below. At this point, you’ll have a URL to access the OpenSearch Dashboard – a place where you can manage, visualize, and monitor data and indexes created within this OpenSearch domain. "
},
{
	"uri": "//localhost:1313/3-configurationawsopensearchdomain/",
	"title": "Configure OpenSearch",
	"tags": [],
	"description": "",
	"content": "In this step, we will download the application source code to integrate AWS OpenSearch and set up an OpenSearch Domain on the AWS Cloud platform.\nContents 3.1. Download the source code\n3.2. Set up the OpenSearch Domain\n3.3. Configure the OpenSearch Index\n"
},
{
	"uri": "//localhost:1313/2-prerequiste/2.3-createiamrole/",
	"title": "Create IAM Role",
	"tags": [],
	"description": "",
	"content": "Access the IAM Service on AWS From the IAM service console, select Policies from the left-hand navigation menu\nClick the Create policy button In the Create policy dialog:\nChoose the JSON tab in the Policy editor section and paste the following content. Make sure to replace \u0026quot;YourAccountID\u0026quot; with your actual AWS account ID. {\r\"Version\": \"2012-10-17\",\r\"Statement\": [\r{\r\"Effect\": \"Allow\",\r\"Action\": [\r\"logs:CreateLogGroup\",\r\"logs:DescribeLogGroups\"\r],\r\"Resource\": \"arn:aws:logs:ap-southeast-1::*\"\r},\r{\r\"Effect\": \"Allow\",\r\"Action\": [\r\"logs:CreateLogStream\",\r\"logs:PutLogEvents\",\r\"logs:DescribeLogStreams\"\r],\r\"Resource\": [\r\"arn:aws:logs:ap-southeast-1::log-group:/movie-search/analytics:*\"\r]\r}\r]\r}\rClick Next, enter a name of your choice for the policy under Policy name, scroll down and click Create policy Wait for the policy to be created successfully. Return to the IAM Policies main page to verify that your new policy appears in the list. Attach the Created Policy to an IAM Role From the IAM service console, select Roles from the left-hand navigation menu\nClick the Create role button In the Create role dialog:\nChoose AWS Service as the trusted entity type, and select Lambda as the use case In the Add permissions step, under Filter by Type, select Customer managed, choose the policy you just created, and click Next Review your role settings, enter a name of your choice for the role (you will need this name later), and click Create role. Make sure the role is created successfully. "
},
{
	"uri": "//localhost:1313/3-configurationawsopensearchdomain/3.3-configindex/",
	"title": "Index Configuration",
	"tags": [],
	"description": "",
	"content": " Open the project folder that was previously cloned from GitHub in VSCode, then navigate to the backend folder. We will use the connection URL to the newly created OpenSearch Domain to configure the index and input data for the OpenSearch engine when launching the project. Back in the project, open the .env file (created earlier) inside the backend folder and add the environment variables such as OPSURLCLIENT, PWDOPS, and USERNAMOPS with corresponding values: the URL from the step above, the username, and the password configured when creating the OpenSearch Domain. Next, open the Terminal in VSCode and run the command npm run dev. Once executed, the process of collecting and transferring data from MongoDB to the OpenSearch Domain you created earlier will begin. Upon success, the interface will appear as follows: Verify the index just created on the OpenSearch Dashboard Go to the OpenSearch service on the AWS Management Console and access the following URL: After accessing this URL, the OpenSearch Domain management interface will appear. Click on OpenSearch Dashboard. Next, select Add your data. Then select Create index pattern. Here you will see an index named movies-optimized. This is the index configured and created in this Domain from the project\u0026rsquo;s source code. If the setup was successful, you will definitely see this index name. Prepare to deploy the backend on Lambda After successfully creating the index in the OpenSearch Domain, return to the project and delete or comment out the two lines of code previously added to the project file. This is because serverless environments like Lambda do not configure and use environment variables in this way. "
},
{
	"uri": "//localhost:1313/4-awslambda/",
	"title": "Configure Backend with AWS Lambda",
	"tags": [],
	"description": "",
	"content": " Create and Upload the Project to Lambda Function Log in to the AWS Console, go to the Lambda service, select Functions, then click Create function. In the function creation window, choose the Author from scratch option. Next, name your Lambda function and configure the settings as shown below. Leave any unspecified fields as default, then click Create. Wait for the Lambda function creation process to complete. You will see a confirmation message like this: Next, open your project folder and go to the backend directory. Select the files shown below and compress them into a .zip file. Go back to the Lambda function interface you just created, select the Code tab and choose Upload from. When the upload window appears, drag and drop the compressed .zip file to import the source code into the Lambda function. Configure the Lambda Function In the Lambda function interface, scroll down to the Runtime settings section and click Edit. Here, modify the path so that Lambda knows where your project’s entry file is and how to execute it. Then click Save. Next, scroll back up to the Code source section to configure environment variables for the project. Here, configure the environment variables that were previously set in the .env file inside the backend folder of your project. After configuration, click Save. Once the environment variables are successfully configured, go to the Configuration tab and follow the instructions to create a function URL. Then configure the policy as shown to allow external services like CloudFront to access the Lambda function. Click Save. After successful configuration, Lambda will generate a function URL that allows frontend applications to connect to the backend hosted in the Lambda function. Next, we will configure permissions so that the Lambda function can write logs to CloudWatch, including search keywords and request statuses from clients. These logs will help analyze user behavior and monitor server status. In the Role selection for the Lambda function, use the Role created in step 2 Prerequisites "
},
{
	"uri": "//localhost:1313/5-hostingstaticwebsite/",
	"title": "Configure Frontend with S3 and CloudFront",
	"tags": [],
	"description": "",
	"content": " Configure and upload the project to AWS S3 Open the project\u0026rsquo;s frontend folder, create an environment file named .env.production, and add an environment variable with the value being the function URL of the Lambda function we created earlier. Then build the frontend project using the command npm run build. Once the build completes successfully, a dist folder will be generated. Log in to the AWS Management Console, go to the S3 service, and click Create bucket. In the bucket creation window, follow the highlighted instructions. Leave all unspecified fields with their default settings. Once the bucket is successfully created, open it and select Upload. At this step, navigate to the previously built dist folder and upload all its contents to the bucket. After a successful upload, verify the uploaded files and confirm the upload. Next, from the main interface of the newly created bucket, go to the Permissions tab and click Edit. In the Edit bucket policy window, modify the policy as shown below to allow CloudFront to access the frontend assets uploaded to the S3 bucket. Be sure to replace YourBucketName with the actual name of your bucket. {\r\"Version\": \"2012-10-17\",\r\"Statement\": [\r{\r\"Sid\": \"AllowCloudFrontAccess\",\r\"Effect\": \"Allow\",\r\"Principal\": \"*\",\r\"Action\": \"s3:GetObject\",\r\"Resource\": \"arn:aws:s3:::/*\"\r}\r]\r}\rConfigure CloudFront to deliver website content Log in to the AWS Management Console and select the CloudFront service, then choose Create distribution. In the Create Distribution window, fill in the fields as instructed. Leave unspecified fields with their default configurations. For the Origin configuration step, select the S3 bucket you created earlier. For the remaining settings of the distribution, proceed as shown: Once the configuration is confirmed, CloudFront will generate a Distribution domain name that allows access to your domain over the internet. You must wait for the deployment process to complete. Next, configure CloudFront to access the website resources in S3 and define the website\u0026rsquo;s entry point. In the Settings section, click Edit. In the configuration edit window, specify the entry file of your website under Default root object. That completes the configuration process to deploy your project on AWS services. Now, wait for the CloudFront domain deployment to finish, and then you can experience your website.\nOnce the deployment is complete, use the Distribution domain name to access the website via the internet. You should be able to see your project’s frontend interface. Try searching for movies using keywords. You\u0026rsquo;ll see how powerful OpenSearch\u0026rsquo;s full-text search engine is at returning fast and relevant results even over large datasets. Additionally, full-text search supports fuzzy matching and highlights approximate matches in yellow.\n"
},
{
	"uri": "//localhost:1313/6-applicationlogwithcloudwatch/",
	"title": "View Logs in CloudWatch",
	"tags": [],
	"description": "",
	"content": " Log in to the AWS Console and select the CloudWatch service. Then choose Logs, and select Log groups. In the log groups window on the right, you will see a log group named /movie-search/analytics. This log group is configured in the backend of the project. Every time you perform a search query, the search keywords and the request status to the OpenSearch Domain are recorded here. Next, select search-logs. Here you will see the detailed logs that have been recorded. "
},
{
	"uri": "//localhost:1313/7-cleanup/",
	"title": "Clean up Resources",
	"tags": [],
	"description": "",
	"content": "We will follow the steps below to delete the resources created during this lab.\nDelete OpenSearch Domain Go to the OpenSearch service management console\nClick Domains. Click on the domain you created during the lab. Click Delete. Follow the instructions in the popup window and then click Delete to confirm. Delete Lambda Function Go to the Lambda service management console\nClick Functions. Select the Lambda function you created. Click Actions, choose Delete function from the dropdown list, and confirm the deletion. Delete CloudFront Distribution Go to the CloudFront service management console\nClick Distribution. Select the distribution you created during the lab, and click Disable to disable the domain before deletion. Once the domain is successfully disabled, click Delete to remove it and confirm deletion. Delete S3 Bucket Go to the System Manager - Session Manager console. Click the Preferences tab. Click Edit. Scroll down. Under S3 logging, Uncheck Enable to disable logging. Scroll down again. Click Save. Go to the S3 service console Select the S3 bucket you created during the lab. Click Empty. Type permanently delete, then click Empty to delete objects in the bucket. Click Exit. After deleting all objects in the bucket, click Delete. Enter the name of the S3 bucket, then click Delete bucket to complete the deletion. Delete IAM Role and Policy Go to the IAM service management console\nClick the Policies tab. Click Filter by Type and select Customer managed. Search for the policy you created in Step 2 and click Delete, then confirm the deletion. Click the Roles tab. Select the role you created during the lab, for example: latestRule. Click Delete. Enter the role name and confirm deletion. "
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]